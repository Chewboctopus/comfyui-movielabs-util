from pydantic import BaseModel, Field
from typing import List
from .version import model_name, model_version

# Is the task considered direct production work (production)or something that helps with production eventually (narrative)

class IdentifierModel(BaseModel):
    identifier_scope: str = Field(alias="identifierScope")
    identifier_value: str = Field(alias="identifierValue")

class AssetProvenanceModel(BaseModel):

    # generated by the tool
    batch_id: str = Field(default=None)

    # comes from production systems, such as ShotGrid
    shot_id: str = Field(default=None, alias="shotId")
    task_id: str = Field(default=None, alias="taskId")
    artist_id: List[str] = Field(default=None, alias="artistId")

    # comes from narrative tracking systems, such as Yamdu
    creative_work: IdentifierModel = Field(alias="creativeWork")
    character: List[IdentifierModel] = Field(default=None, alias="character")
    scene: IdentifierModel = Field(default=None, alias="scene")
    production_location: IdentifierModel = Field(default=None, alias="productionLocation")

    # comes from MAM
    script_id: IdentifierModel = Field(alias="script")

    # comes from the tool
    context: str = Field(description="Is the task considered direct production work (production) or something that helps with production eventually (narrative)?")
    asset_type: str = Field(description="The type of asset", alias="assetFunctionalType")

class AssetProvenance:
    def __init__(self):
        pass

    @classmethod
    def INPUT_TYPES(s):
        return {
            "optional": {
                "shot_id": ("STRING",),
                "task_id": ("STRING",),
                "artist_id": ("STRING",),
                "creative_work": ("STRING",),
                "character": ("STRING",),
                "scene": ("STRING",),
                "production_location": ("STRING",),
                "script": ("STRING",),
                "context": ("STRING",),
                "asset_type": ("STRING",),
            },
        }

    RETURN_TYPES = ("PROVENANCE",)
    RETURN_NAMES = ("provenance",)
    FUNCTION = "capture_provenance"
    OUTPUT_NODE = False
    CATEGORY = "MovieLabs > Util > Grant8&9"

    def capture_provenance(self, **kwargs):
        provenance = {}
        model = {}
        model["model_name"] = model_name
        model["model_version"] = model_version
        provenance["model"] = model
        provenance["data"] = kwargs
        return (provenance,)

NODE_CLASS_MAPPINGS = {
    "AssetProvenance": AssetProvenance
}

NODE_DISPLAY_NAME_MAPPINGS = {
    "AssetProvenance": "Asset Provenance"
}
