import getpass
import os
import hashlib
import time
from typing import Optional
from pydantic import BaseModel, Field
from .version import model_name, model_version
from .seed import shot_names, task_names, creative_work_names, script_revisions, character_names, scene_numbers
from .seed import get_shot_id, get_task_id, get_creative_work_id, get_script_id, get_character_id, get_scene_id

class IdentifierModel(BaseModel):
    scope: str = Field(alias="identifierScope")
    value: str = Field(alias="identifierValue")
    class Config:
        populate_by_name = True

class AssetProvenanceModel(BaseModel):
    # generated by the tool
    batch_id: str = Field(default=None)
    # comes from production systems, such as ShotGrid
    shot_id: str = Field(default=None, alias="shotId")
    task_id: str = Field(default=None, alias="taskId")
    artist_id: Optional[str] = Field(default=None, alias="artistId")
    setup: str = Field(default=None, alias="setup")
    take: str = Field(default=None, alias="take")
    # comes from narrative tracking systems, such as Yamdu
    creative_work: IdentifierModel = Field(alias="creativeWork")
    creative_work_name: str = Field(default=None, alias="creativeWorkName")
    character: Optional[IdentifierModel] = Field(default=None, alias="character")
    scene: Optional[IdentifierModel] = Field(default=None, alias="scene")
    # comes from MAM
    script_id: IdentifierModel = Field(alias="script")
    # comes from the tool
    context: str = Field(description="Is the task considered direct production work (production) or something that helps with production eventually (narrative)?")
    asset_type: str = Field(description="The type of asset", alias="assetFunctionalType")
    scene_number: Optional[str] = Field(default=None, alias="sceneNumber")
    for_review: bool = Field(default=False, alias="forReview", description="Flag to indicate if this asset is a candidate for review")
    class Config:
        populate_by_name = True

class AssetProvenance:
    def __init__(self):
        pass

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "for_review": ("BOOLEAN", {"default": False, "label": "Mark as review candidate"}),
                "shot_name": (shot_names,),
                "task_name": (task_names,),
                "creative_work_name": (creative_work_names,),
                "script_revision": (script_revisions,),
                "context": (["production", "concept", "experimentation"], {"tooltip": "Is the task considered direct production work (production) or something that helps with production eventually (concept) or an experiment (experimentation)?"}),
                "asset_type": (["shot",
                    "shot.firstFrame",
                    "shot.beginningKeyFrame",
                    "shot.middleKeyFrame",
                    "shot.endKeyFrame",
                    "shot.animation",
                    "shot.vfx",
                    "artwork",
                    "artwork.animatedStoryboard",
                    "artwork.conceptArt",
                    "artwork.storyboard",
                    "capture",
                    "capture.calibration",
                    "capture.cameraProxy",
                    "capture.faceCamera",
                    "capture.lidar",
                    "capture.motionCapture",
                    "capture.ocf",
                    "capture.roll",
                    "capture.witnessCamera",
                    "cgModel",
                    "configuration",
                    "configuration.colorSpace",
                    "costume",
                    "creativeReferenceMaterial",
                    "material",
                    "productionCharacter",
                    "productionProp",
                    "productionProp.productionGreenery",
                    "productionProp.productionVehicle",
                    "productionSetDressing",
                    "productionSetDressing.productionGreenery",
                    "productionSetDressing.productionVehicle",
                    "sequenceChronologyDescriptor",
                    "technicalReferenceMaterial"
                  ],),
            },
            "optional": {
                "character_name": ([""] + character_names, {"default": ""}),
                "scene": ([""] + scene_numbers, {"default": ""}),
                "setup": ("STRING", {"default": "", "multiline": False}),
                "take": ("STRING", {"default": "", "multiline": False}),
            },
        }

    RETURN_TYPES = ("PROVENANCE",)
    RETURN_NAMES = ("provenance",)
    FUNCTION = "capture_provenance"
    OUTPUT_NODE = False
    CATEGORY = "MovieLabs > Util > Grant8&9"

    def capture_provenance(self, **kwargs):
        # Method 1: get artist id from system username - works on macOS, Linux, and Windows
        current_user = None

        try:
            current_user = getpass.getuser()
        except Exception:
            pass
        
        # Method 2: Check environment variables
        if not current_user:
            for env_var in ['USER', 'LOGNAME', 'USERNAME']:
                current_user = os.environ.get(env_var)
                if current_user:
                    break
            
        artist_id = current_user
        
        shot_id = get_shot_id(kwargs["shot_name"])
        task_id = get_task_id(kwargs["task_name"])
        creative_work_id = get_creative_work_id(kwargs["creative_work_name"])
        creative_work_name = kwargs["creative_work_name"] if kwargs["creative_work_name"] else None
        script_id = get_script_id(kwargs["script_revision"])
        character_id = get_character_id(kwargs["character_name"]) if kwargs["character_name"] else None
        scene_number = kwargs["scene"] if kwargs["scene"] else None
        scene = get_scene_id(kwargs["scene"]) if kwargs["scene"] else None
        context = kwargs["context"]
        asset_type = kwargs["asset_type"]
        setup = kwargs["setup"]
        take = kwargs["take"]
        for_review = kwargs["for_review"]
        if context == "concept" and character_id is None:
            raise ValueError("Character is required for concept work")

        prov = AssetProvenanceModel(
            artist_id=artist_id,
            shot_id=shot_id,
            task_id=task_id,
            creative_work=IdentifierModel(identifierScope=creative_work_id[0], identifierValue=creative_work_id[1]),
            creative_work_name=creative_work_name,
            script_id=IdentifierModel(identifierScope=script_id[0], identifierValue=script_id[1]),
            character=IdentifierModel(identifierScope=character_id[0], identifierValue=character_id[1]) if character_id else None,
            scene=IdentifierModel(identifierScope=scene[0], identifierValue=scene[1]) if scene else None,
            scene_number=scene_number,
            context=context,
            asset_type=asset_type,
            setup=setup,
            take=take,
            for_review=for_review
        )
        provenance = {}
        model = {}
        model["modelName"] = model_name
        model["modelVersion"] = model_version
        provenance["model"] = model
        provenance["data"] = prov.model_dump(by_alias=True)
        return (provenance,)

NODE_CLASS_MAPPINGS = {
    "AssetProvenance": AssetProvenance
}

NODE_DISPLAY_NAME_MAPPINGS = {
    "AssetProvenance": "Asset Provenance"
}
